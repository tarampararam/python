'''В данной задаче вам будет необходимо работать с заранее подготовленным файлом, представленным ниже. Текстовый файл находится в ZIP архиве, вам необходимо скачать его, распаковать и переместить текстовый документ в папку, где будет лежать файл с программой для решения данной задачи. 
Файл представляет собой список данных людей со следующими заголовками:

EMAIL   NAME    LAST_NAME   TEL CITY
Столбец EMAIL пустой у всех. Остальные позиции могут быть заполнены или нет.
Представим следующую ситуацию: вы являетесь сотрудником IT отдела некой компании. Ваша компания открывает новый филиал с переводом необходимого количества сотрудников из разных городов. Новый филиал имеет свой почтовый домен. Вам, как сотруднику IT отдела, необходимо создать каждому сотруднику, переходящему в новый филиал, свой уникальный почтовый адрес. У вас есть неотформатированный список сотрудников, который заполняли непонятно как. Также у вас есть кусок кода - функция, которая по имени и фамилии сотрудника составляет его уникальный почтовый адрес. Для выполнения данного задания вам необходимо написать программу, удовлетворяющую следующим требованиям:

1) Программа должна читать исходный текстовый файл

2) Программа должна содержать функцию, представленную ниже, для создания почтовых адресов

3) Программа должна заполнить пустой столбец с почтовыми адресами в исходном файле и перезаписать его

4) Почтовый адрес должен создаваться только для тех, у кого заполнены все остальные поля - Имя, Фамилия, Телефонный номер, Город

5) Телефонный номер считается валидным, если он состоит из 7 цифр, в противном случае информация невалидна и программа не должна создавать почтовый адрес сотруднику


Функция для создания почтовых адресов email_gen:
Функция принимает список списков [['Имя_1', 'Фамилия_1'], ['Имя_2', 'Фамилия_2'], ['Имя_3', 'Фамилия_3']] из имен и фамилий list_of_names. Далее создается пустой список emails, который в ходе выполнения, заполнится почтовыми адресами. Запускается цикл для каждого списка из имени и фамилии ['Имя_1', 'Фамилия_1']. Устанавливается окончание среза letter = 1. Далее проходит проверка на совпадение, если в списке адресов уже есть такой же адрес (например имя и фамилия сотрудников совпадают), то срез i[0][0:letter] увеличивается на 1 символ. После в список адресов добавляется новый адрес. Адреса присваиваются пользователям по следующей формуле: берется фамилия сотрудника, добавляется точка, затем добавляется первая буква имени и остаточная часть '@company.io'. Если имена и фамилии сотрудников совпадают, к первой букве имени добавляется вторая и т.д.
'''

f = open('task_file.txt', 'r+')
data = list()
list_of_names = list()
new_data = list()

for x in f:
    data.append(x.split(','))         # считываем данные из файла и сплитим в список

for x in data:                        # убираем пробелы из строк списков
    y = 0
    while y < len(x):
        x[y] = x[y].replace(' ', '')
        y+=1
processed_data = list()

for x in data:
    if bool(x[1]) == True and bool(x[2]) == True and len(x[3]) == 7 and bool(x[4]) == True:
        processed_data.append(x)
data = processed_data

for x in data:                        # добавляем список списки, состоящих из имен [имя, фамилия]. Добавляем только валидные строки, у кого телефон из 7 цифр
    if len(x[3]) == 7:                                                               
        list_of_names.append([x[1], x[2]]) 

new_list = list()
for x in list_of_names:                                                                            
    new_list.append(x)               
list_of_names = new_list

def email_gen(list_of_names):
    emails = []
    for i in list_of_names:
        letter = 1
        while i[1] + '.' + i[0][0:letter] + '@company.io' in emails:
            letter+=1
        emails.append(i[1] + '.' + i[0][0:letter] + '@company.io')
    return emails

emails = []
emails = email_gen(list_of_names)
x = 0
while x < len(data):
    data[x].insert(0, emails[x])
    data[x].remove('')
    x += 1
data.insert(0 ,['EMAIL', 'LAST_NAME', 'FIRST_NAME', 'TEL', 'CITY\n'])
print(data)
f.seek(0)
data_str = str()
for x in data:
    data_str = ', '.join(x)
    f.write(data_str)
f.close()
